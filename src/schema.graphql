### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  authUid: String
  createdAt: DateTime!
  defaultProfile: Profile
  id: ID!
  owner: String!
  profiles: [Profile!]!
  type: AccountType!
  updatedAt: DateTime
}

enum AccountType {
  TRADITIONAL
  WALLET
}

input AddToPlaylistInput {
  accountId: String!
  owner: String!
  playlistId: String!
  profileId: String!
  publishId: String!
}

input AddToWatchLaterInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
}

type Blog {
  content: Json!
  createdAt: DateTime!
  excerpt: String
  htmlContent: String
  publish: Publish
  publishId: String!
  readingTime: String
  updatedAt: DateTime
}

type Bookmark {
  createdAt: DateTime!
  id: ID!
  profile: Profile!
  profileId: String!
  publish: Publish!
  publishId: String!
}

type BookmarkEdge {
  cursor: String
  node: Bookmark
}

input BookmarkPostInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
}

input CacheSessionInput {
  accountId: String!
  address: String!
  profileId: String!
}

type CalculateTipsResult {
  tips: String!
}

enum Category {
  AI
  Animals
  Blockchain
  Children
  Drinks
  Education
  Entertainment
  Food
  Gaming
  Health
  History
  LifeStyle
  Men
  Movies
  Music
  News
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

input CheckPublishPlaylistsInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
}

type CheckPublishPlaylistsResponse {
  isInWatchLater: Boolean!
  items: [PlaylistItem!]!
  publishId: String!
}

type Comment {
  comment: Comment
  commentId: String
  commentType: CommentType!
  comments: [Comment!]!
  commentsCount: Int!
  content: String
  contentBlog: Json
  createdAt: DateTime!
  creator: Profile!
  creatorId: String!
  disLiked: Boolean
  disLikes: [CommentDisLike!]!
  disLikesCount: Int!
  htmlContentBlog: String
  id: ID!
  liked: Boolean
  likes: [CommentLike!]!
  likesCount: Int!
  publish: Publish!
  publishId: String!
  updatedAt: DateTime
}

type CommentDisLike {
  comment: Comment!
  commentId: String!
  profile: Profile!
  profileId: String!
}

type CommentEdge {
  cursor: String
  node: Comment
}

type CommentLike {
  comment: Comment!
  commentId: String!
  profile: Profile!
  profileId: String!
}

input CommentPublishInput {
  accountId: String!
  commentId: String
  commentType: CommentType!
  content: String
  contentBlog: Json
  htmlContentBlog: String
  owner: String!
  profileId: String!
  publishId: String!
}

enum CommentType {
  COMMENT
  PUBLISH
}

enum CommentsOrderBy {
  counts
  newest
}

input CreateDraftBlogInput {
  accountId: String!
  creatorId: String!
  owner: String!
}

type CreateDraftBlogResult {
  id: String!
}

input CreateDraftVideoInput {
  accountId: String!
  creatorId: String!
  filename: String!
  owner: String!
}

type CreateDraftVideoResult {
  filename: String
  id: String!
}

input CreatePlayListInput {
  accountId: String!
  name: String!
  owner: String!
  profileId: String!
  publishId: String!
}

input CreateProfileInput {
  accountId: String!
  name: String!
  owner: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteCommentInput {
  accountId: String!
  commentId: String!
  owner: String!
  profileId: String!
}

input DeletePlaylistInput {
  accountId: String!
  owner: String!
  playlistId: String!
  profileId: String!
}

input DeletePublishInput {
  accountId: String!
  creatorId: String!
  owner: String!
  publishId: String!
}

type DisLike {
  createdAt: DateTime!
  profile: Profile!
  profileId: String!
  publish: Publish!
  publishId: String!
}

type DontRecommend {
  createdAt: DateTime!
  requestorId: String!
  target: Profile!
  targetId: String!
}

type DontRecommendEdge {
  cursor: String
  node: DontRecommend
}

input DontRecommendInput {
  accountId: String!
  owner: String!
  profileId: String!
  targetId: String!
}

input FetchBookmarkInput {
  accountId: String!
  cursor: String
  orderBy: PlaylistOrderBy
  owner: String!
  profileId: String!
}

type FetchBookmarkResponse {
  edges: [BookmarkEdge!]!
  pageInfo: PageInfo!
}

input FetchCommentsByPublishIdInput {
  cursor: String
  orderBy: CommentsOrderBy
  publishId: String!
  requestorId: String
}

type FetchCommentsResponse {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

input FetchDontRecommendsInput {
  accountId: String!
  cursor: String
  owner: String!
  requestorId: String!
}

type FetchDontRecommendsResponse {
  edges: [DontRecommendEdge!]!
  pageInfo: PageInfo!
}

input FetchMyPlaylistsInput {
  accountId: String!
  cursor: String
  owner: String!
  profileId: String!
}

input FetchMyPublishesInput {
  accountId: String!
  creatorId: String!
  cursor: String
  owner: String!
  publishType: QueryPublishType
}

input FetchPlaylistItemsInput {
  accountId: String!
  cursor: String
  orderBy: PlaylistOrderBy
  owner: String!
  playlistId: String!
  profileId: String!
}

type FetchPlaylistItemsResponse {
  edges: [PlaylistItemEdge!]!
  pageInfo: PageInfo!
  playlistDescription: String
  playlistName: String!
}

type FetchPlaylistsResponse {
  edges: [PlaylistEdge!]!
  pageInfo: PageInfo!
}

type FetchPreviewPlaylistsResponse {
  edges: [PreviewPlaylistEdge!]!
  pageInfo: PageInfo!
}

input FetchPublishesByCatInput {
  category: Category!
  cursor: String
  requestorId: String
}

input FetchPublishesByProfileInput {
  creatorId: String!
  cursor: String
  orderBy: PublishOrderBy
  publishType: QueryPublishType
  requestorId: String
}

input FetchPublishesByQueryStringInput {
  cursor: String
  publishType: QueryPublishType
  query: String!
  requestorId: String
}

input FetchPublishesByTagInput {
  cursor: String
  publishType: QueryPublishType
  requestorId: String
  tag: String!
}

input FetchPublishesInput {
  cursor: String
  orderBy: PublishOrderBy
  publishType: QueryPublishType
  requestorId: String
}

type FetchPublishesResponse {
  edges: [PublishEdge!]!
  pageInfo: PageInfo!
}

input FetchSubCommentsInput {
  commentId: String!
  cursor: String
  requestorId: String
}

input FetchSuggestedPublishesInput {
  cursor: String
  publishId: String!
  requestorId: String
}

input FetchWatchLaterInput {
  accountId: String!
  cursor: String
  orderBy: PlaylistOrderBy
  owner: String!
  profileId: String!
}

type FetchWatchLaterResponse {
  edges: [WatchLaterEdge!]!
  pageInfo: PageInfo!
}

type Follow {
  follower: Profile!
  followerId: String!
  following: Profile!
  followingId: String!
}

input FollowInput {
  accountId: String!
  followerId: String!
  owner: String!
  profileId: String!
}

input GetMyAccountInput {
  accountType: AccountType!
}

scalar Json

type Like {
  createdAt: DateTime!
  profile: Profile!
  profileId: String!
  publish: Publish!
  publishId: String!
}

input LikeCommentInput {
  accountId: String!
  commentId: String!
  owner: String!
  profileId: String!
  publishId: String!
}

input LikePublishInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
}

type Mutation {
  addToNewPlaylist(input: CreatePlayListInput!): WriteResult
  addToPlaylist(input: AddToPlaylistInput!): WriteResult
  addToWatchLater(input: AddToWatchLaterInput!): WriteResult
  bookmarkPost(input: BookmarkPostInput!): WriteResult
  cacheSession(input: CacheSessionInput!): WriteResult!
  calculateTips(qty: Int!): CalculateTipsResult
  comment(input: CommentPublishInput!): WriteResult
  countViews(publishId: String!): WriteResult
  createAccount(input: GetMyAccountInput!): Account
  createDraftBlog(input: CreateDraftBlogInput!): CreateDraftBlogResult
  createDraftVideo(input: CreateDraftVideoInput!): CreateDraftVideoResult
  createProfile(input: CreateProfileInput!): Profile
  deleteAllPlaylistItems(input: DeletePlaylistInput!): WriteResult
  deleteComment(input: DeleteCommentInput!): WriteResult
  deletePlaylist(input: DeletePlaylistInput!): WriteResult
  deletePublish(input: DeletePublishInput!): WriteResult
  disLikeComment(input: LikeCommentInput!): WriteResult
  disLikePublish(input: LikePublishInput!): WriteResult
  dontRecommend(input: DontRecommendInput!): WriteResult
  follow(input: FollowInput!): WriteResult
  likeComment(input: LikeCommentInput!): WriteResult
  likePublish(input: LikePublishInput!): WriteResult
  removeAllBookmarks(input: RemoveAllBookmarksInput!): WriteResult
  removeAllWatchLater(input: RemoveAllWatchLaterInput!): WriteResult
  removeBookmark(input: BookmarkPostInput!): WriteResult
  removeDontRecommend(input: DontRecommendInput!): WriteResult
  removeFromPlaylist(input: RemoveFromPlaylistInput!): WriteResult
  removeFromWatchLater(input: RemoveFromWatchLaterInput!): WriteResult
  reportPublish(input: ReportPublishInput!): WriteResult
  sendTips(input: SendTipsInput!): SendTipsResult
  updateBannerImage(input: UpdateImageInput!): WriteResult
  updateBlog(input: UpdateBlogInput!): WriteResult
  updateDisplayName(input: UpdateNameInput!): WriteResult
  updateName(input: UpdateNameInput!): WriteResult
  updatePlaylistDescription(input: UpdatePlaylistDescriptionInput!): WriteResult
  updatePlaylistName(input: UpdatePlaylistNameInput!): WriteResult
  updatePlaylists(input: UpdatePlaylistsInput!): WriteResult
  updateProfileImage(input: UpdateImageInput!): WriteResult
  updateReadPreferences(input: UpdatePreferencesInput!): WriteResult
  updateVideo(input: UpdateVideoInput!): Publish
  updateWatchPreferences(input: UpdatePreferencesInput!): WriteResult
  validateAuth(input: ValidateAuthInput!): ValidateAuthResult
  validateName(name: String!): Boolean
}

type PageInfo {
  count: Int
  endCursor: String
  hasNextPage: Boolean
}

type Playback {
  createdAt: DateTime!
  dash: String!
  duration: Float!
  hls: String!
  id: ID!
  preview: String!
  publish: Publish
  publishId: String!
  thumbnail: String!
  updatedAt: DateTime
  videoId: String!
}

type Playlist {
  createdAt: DateTime!
  description: String
  id: ID!
  items: [PlaylistItem!]!
  name: String!
  owner: Profile!
  ownerId: String!
}

type PlaylistEdge {
  cursor: String
  node: Playlist
}

type PlaylistItem {
  createdAt: DateTime!
  id: ID!
  playlist: Playlist!
  playlistId: String!
  publish: Publish!
  publishId: String!
}

type PlaylistItemEdge {
  cursor: String
  node: PlaylistItem
}

input PlaylistItemStatus {
  isInPlaylist: Boolean!
  playlistId: String!
}

enum PlaylistOrderBy {
  newest
  oldest
}

type PreviewPlaylist {
  count: Int!
  id: String!
  lastItem: Publish
  name: String!
}

type PreviewPlaylistEdge {
  cursor: String
  node: PreviewPlaylist
}

type Profile {
  account: Account!
  accountId: String!
  bannerImage: String
  bannerImageRef: String
  createdAt: DateTime!
  defaultColor: String
  displayName: String!
  followersCount: Int!
  followingCount: Int!
  id: ID!
  image: String
  imageRef: String
  isFollowing: Boolean
  isOwner: Boolean
  name: String!
  owner: String!
  playlists: [Playlist!]!
  publishes: [Publish!]!
  publishesCount: Int!
  readPreferences: [Category!]!
  updatedAt: DateTime
  watchLater: [WatchLater!]!
  watchPreferences: [Category!]!
}

type Publish {
  blog: Blog
  bookmarked: Boolean
  comments: [Comment!]!
  commentsCount: Int!
  contentRef: String
  contentURI: String
  createdAt: DateTime!
  creator: Profile!
  creatorId: String!
  deleting: Boolean!
  description: String
  disLiked: Boolean
  disLikesCount: Int!
  dislikes: [DisLike!]!
  filename: String
  id: ID!
  lastComment: Comment
  liked: Boolean
  likes: [Like!]!
  likesCount: Int!
  playback: Playback
  primaryCategory: Category
  publishType: PublishType
  secondaryCategory: Category
  tags: String
  thumbnail: String
  thumbnailRef: String
  thumbnailType: ThumbnailType!
  tips: [Tip!]!
  tipsCount: Int!
  title: String
  transcodeError: Boolean!
  updatedAt: DateTime
  uploadError: Boolean!
  uploading: Boolean!
  views: Int!
  visibility: Visibility!
}

type PublishEdge {
  cursor: String
  node: Publish
}

enum PublishOrderBy {
  latest
  popular
}

enum PublishType {
  Ads
  Blog
  Podcast
  Short
  Video
}

type Query {
  checkPublishPlaylists(input: CheckPublishPlaylistsInput!): CheckPublishPlaylistsResponse
  fetchBookmarks(input: FetchBookmarkInput!): FetchBookmarkResponse
  fetchCommentsByPublishId(input: FetchCommentsByPublishIdInput!): FetchCommentsResponse
  fetchDontRecommends(input: FetchDontRecommendsInput!): FetchDontRecommendsResponse
  fetchMyPlaylists(input: FetchMyPlaylistsInput!): FetchPlaylistsResponse
  fetchMyPublishes(input: FetchMyPublishesInput!): FetchPublishesResponse
  fetchPlaylistItems(input: FetchPlaylistItemsInput!): FetchPlaylistItemsResponse
  fetchPreviewBookmarks(input: FetchBookmarkInput!): FetchBookmarkResponse
  fetchPreviewPlaylists(input: FetchMyPlaylistsInput!): FetchPreviewPlaylistsResponse
  fetchPreviewWatchLater(input: FetchWatchLaterInput!): FetchWatchLaterResponse
  fetchProfilePublishes(input: FetchPublishesByProfileInput!): FetchPublishesResponse
  fetchPublishes(input: FetchPublishesInput!): FetchPublishesResponse
  fetchPublishesByQueryString(input: FetchPublishesByQueryStringInput!): FetchPublishesResponse
  fetchPublishesByTag(input: FetchPublishesByTagInput!): FetchPublishesResponse
  fetchSubComments(input: FetchSubCommentsInput!): FetchCommentsResponse
  fetchSuggestedBlogs(input: FetchSuggestedPublishesInput!): FetchPublishesResponse
  fetchSuggestedVideos(input: FetchSuggestedPublishesInput!): FetchPublishesResponse
  fetchVideosByCategory(input: FetchPublishesByCatInput!): FetchPublishesResponse
  fetchWatchLater(input: FetchWatchLaterInput!): FetchWatchLaterResponse
  getBalance(address: String!): String!
  getMyAccount(input: GetMyAccountInput!): Account
  getProfileById(input: QueryByIdInput!): Profile
  getProfileByName(input: QueryByNameInput!): Profile
  getPublishById(input: QueryByIdInput!): Publish
  getShort(input: QueryByIdInput!): Publish
}

input QueryByIdInput {
  requestorId: String
  targetId: String!
}

input QueryByNameInput {
  name: String!
  requestorId: String
}

enum QueryPublishType {
  ads
  all
  blogs
  shorts
  videos
}

input RemoveAllBookmarksInput {
  accountId: String!
  owner: String!
  profileId: String!
}

input RemoveAllWatchLaterInput {
  accountId: String!
  owner: String!
  profileId: String!
}

input RemoveFromPlaylistInput {
  accountId: String!
  owner: String!
  playlistId: String!
  profileId: String!
  publishId: String!
}

input RemoveFromWatchLaterInput {
  accountId: String!
  id: String
  owner: String!
  profileId: String!
  publishId: String!
}

type Report {
  createdAt: DateTime!
  id: ID!
  publish: Publish!
  publishId: String!
  reason: ReportReason!
  submittedBy: Profile!
  submittedById: String!
}

input ReportPublishInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
  reason: ReportReason!
}

enum ReportReason {
  abuse
  adult
  harass
  harmful
  hateful
  mislead
  spam
  terrorism
  violent
}

input SendTipsInput {
  accountId: String!
  owner: String!
  profileId: String!
  publishId: String!
  qty: Int!
  receiverId: String!
}

type SendTipsResult {
  amount: String!
  fee: String!
  from: String!
  to: String!
}

enum ThumbnailType {
  custom
  generated
}

type Tip {
  amount: String!
  createdAt: DateTime!
  fee: String!
  from: String!
  id: ID!
  publish: Publish!
  publishId: String!
  receiver: Profile!
  receiverId: String!
  sender: Profile!
  senderId: String!
  to: String!
}

input UpdateBlogInput {
  accountId: String!
  content: Json
  creatorId: String!
  filename: String
  htmlContent: String
  imageRef: String
  imageUrl: String
  owner: String!
  preview: String
  primaryCategory: Category
  publishId: String!
  secondaryCategory: Category
  tags: String
  title: String
  visibility: Visibility
}

input UpdateImageInput {
  accountId: String!
  image: String!
  imageRef: String!
  owner: String!
  profileId: String!
}

input UpdateNameInput {
  accountId: String!
  newName: String!
  owner: String!
  profileId: String!
}

input UpdatePlaylistDescriptionInput {
  accountId: String!
  description: String!
  owner: String!
  playlistId: String!
  profileId: String!
}

input UpdatePlaylistNameInput {
  accountId: String!
  name: String!
  owner: String!
  playlistId: String!
  profileId: String!
}

input UpdatePlaylistsInput {
  accountId: String!
  owner: String!
  playlists: [PlaylistItemStatus!]!
  profileId: String!
  publishId: String!
}

input UpdatePreferencesInput {
  accountId: String!
  owner: String!
  preferences: [Category!]!
  profileId: String!
}

input UpdateVideoInput {
  accountId: String!
  contentRef: String
  contentURI: String
  creatorId: String!
  description: String
  owner: String!
  primaryCategory: Category
  publishId: String!
  secondaryCategory: Category
  tags: String
  thumbnail: String
  thumbnailRef: String
  thumbnailType: ThumbnailType!
  title: String
  visibility: Visibility
}

input ValidateAuthInput {
  accountId: String!
  owner: String!
  profileId: String!
}

type ValidateAuthResult {
  isAuthenticated: Boolean!
}

enum Visibility {
  draft
  private
  public
}

type WatchLater {
  createdAt: DateTime!
  id: ID!
  profile: Profile!
  profileId: String!
  publish: Publish!
  publishId: String!
}

type WatchLaterEdge {
  cursor: String
  node: WatchLater
}

type WriteResult {
  status: String!
}